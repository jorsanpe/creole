# Generated from creole/antlr/creole_lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,286,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,105,8,2,1,3,1,
        3,3,3,109,8,3,1,4,1,4,3,4,113,8,4,1,5,1,5,3,5,117,8,5,1,6,1,6,3,
        6,121,8,6,1,7,1,7,1,8,1,8,1,8,3,8,128,8,8,1,8,1,8,1,8,3,8,133,8,
        8,3,8,135,8,8,1,9,1,9,3,9,139,8,9,1,9,3,9,142,8,9,1,10,1,10,3,10,
        146,8,10,1,11,1,11,1,12,4,12,151,8,12,11,12,12,12,152,1,13,1,13,
        3,13,157,8,13,1,14,4,14,160,8,14,11,14,12,14,161,1,15,1,15,1,15,
        1,15,1,16,1,16,3,16,170,8,16,1,16,3,16,173,8,16,1,17,1,17,1,18,4,
        18,178,8,18,11,18,12,18,179,1,19,1,19,3,19,184,8,19,1,20,1,20,3,
        20,188,8,20,1,20,1,20,1,21,1,21,3,21,194,8,21,1,21,3,21,197,8,21,
        1,22,1,22,1,23,4,23,202,8,23,11,23,12,23,203,1,24,1,24,3,24,208,
        8,24,1,25,1,25,1,25,1,25,1,26,1,26,3,26,216,8,26,1,26,3,26,219,8,
        26,1,27,1,27,1,28,4,28,224,8,28,11,28,12,28,225,1,29,1,29,3,29,230,
        8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,
        1,36,1,36,1,37,1,37,3,37,248,8,37,1,37,1,37,1,38,4,38,253,8,38,11,
        38,12,38,254,1,39,1,39,1,40,1,40,1,40,5,40,262,8,40,10,40,12,40,
        265,9,40,1,41,1,41,1,42,1,42,1,43,4,43,272,8,43,11,43,12,43,273,
        1,43,1,43,1,44,1,44,3,44,280,8,44,1,44,3,44,283,8,44,1,44,1,44,0,
        0,45,1,1,3,2,5,3,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,0,23,0,25,0,
        27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,0,
        53,0,55,0,57,0,59,0,61,4,63,5,65,6,67,7,69,8,71,9,73,10,75,11,77,
        0,79,0,81,12,83,0,85,0,87,13,89,14,1,0,10,2,0,76,76,108,108,1,0,
        49,57,2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,55,2,0,66,
        66,98,98,1,0,48,49,4,0,10,10,13,13,34,34,92,92,3,0,65,90,95,95,97,
        122,2,0,9,9,32,32,290,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,81,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,1,91,1,0,0,0,3,97,1,0,0,0,5,104,1,0,0,0,7,106,1,0,0,0,9,110,
        1,0,0,0,11,114,1,0,0,0,13,118,1,0,0,0,15,122,1,0,0,0,17,134,1,0,
        0,0,19,136,1,0,0,0,21,145,1,0,0,0,23,147,1,0,0,0,25,150,1,0,0,0,
        27,156,1,0,0,0,29,159,1,0,0,0,31,163,1,0,0,0,33,167,1,0,0,0,35,174,
        1,0,0,0,37,177,1,0,0,0,39,183,1,0,0,0,41,185,1,0,0,0,43,191,1,0,
        0,0,45,198,1,0,0,0,47,201,1,0,0,0,49,207,1,0,0,0,51,209,1,0,0,0,
        53,213,1,0,0,0,55,220,1,0,0,0,57,223,1,0,0,0,59,229,1,0,0,0,61,231,
        1,0,0,0,63,233,1,0,0,0,65,235,1,0,0,0,67,237,1,0,0,0,69,239,1,0,
        0,0,71,241,1,0,0,0,73,243,1,0,0,0,75,245,1,0,0,0,77,252,1,0,0,0,
        79,256,1,0,0,0,81,258,1,0,0,0,83,266,1,0,0,0,85,268,1,0,0,0,87,271,
        1,0,0,0,89,282,1,0,0,0,91,92,5,99,0,0,92,93,5,108,0,0,93,94,5,97,
        0,0,94,95,5,115,0,0,95,96,5,115,0,0,96,2,1,0,0,0,97,98,5,102,0,0,
        98,99,5,110,0,0,99,4,1,0,0,0,100,105,3,7,3,0,101,105,3,9,4,0,102,
        105,3,11,5,0,103,105,3,13,6,0,104,100,1,0,0,0,104,101,1,0,0,0,104,
        102,1,0,0,0,104,103,1,0,0,0,105,6,1,0,0,0,106,108,3,17,8,0,107,109,
        3,15,7,0,108,107,1,0,0,0,108,109,1,0,0,0,109,8,1,0,0,0,110,112,3,
        31,15,0,111,113,3,15,7,0,112,111,1,0,0,0,112,113,1,0,0,0,113,10,
        1,0,0,0,114,116,3,41,20,0,115,117,3,15,7,0,116,115,1,0,0,0,116,117,
        1,0,0,0,117,12,1,0,0,0,118,120,3,51,25,0,119,121,3,15,7,0,120,119,
        1,0,0,0,120,121,1,0,0,0,121,14,1,0,0,0,122,123,7,0,0,0,123,16,1,
        0,0,0,124,135,5,48,0,0,125,132,3,23,11,0,126,128,3,19,9,0,127,126,
        1,0,0,0,127,128,1,0,0,0,128,133,1,0,0,0,129,130,3,29,14,0,130,131,
        3,19,9,0,131,133,1,0,0,0,132,127,1,0,0,0,132,129,1,0,0,0,133,135,
        1,0,0,0,134,124,1,0,0,0,134,125,1,0,0,0,135,18,1,0,0,0,136,141,3,
        21,10,0,137,139,3,25,12,0,138,137,1,0,0,0,138,139,1,0,0,0,139,140,
        1,0,0,0,140,142,3,21,10,0,141,138,1,0,0,0,141,142,1,0,0,0,142,20,
        1,0,0,0,143,146,5,48,0,0,144,146,3,23,11,0,145,143,1,0,0,0,145,144,
        1,0,0,0,146,22,1,0,0,0,147,148,7,1,0,0,148,24,1,0,0,0,149,151,3,
        27,13,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,
        1,0,0,0,153,26,1,0,0,0,154,157,3,21,10,0,155,157,5,95,0,0,156,154,
        1,0,0,0,156,155,1,0,0,0,157,28,1,0,0,0,158,160,5,95,0,0,159,158,
        1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,30,1,
        0,0,0,163,164,5,48,0,0,164,165,7,2,0,0,165,166,3,33,16,0,166,32,
        1,0,0,0,167,172,3,35,17,0,168,170,3,37,18,0,169,168,1,0,0,0,169,
        170,1,0,0,0,170,171,1,0,0,0,171,173,3,35,17,0,172,169,1,0,0,0,172,
        173,1,0,0,0,173,34,1,0,0,0,174,175,7,3,0,0,175,36,1,0,0,0,176,178,
        3,39,19,0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,
        1,0,0,0,180,38,1,0,0,0,181,184,3,35,17,0,182,184,5,95,0,0,183,181,
        1,0,0,0,183,182,1,0,0,0,184,40,1,0,0,0,185,187,5,48,0,0,186,188,
        3,29,14,0,187,186,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,190,
        3,43,21,0,190,42,1,0,0,0,191,196,3,45,22,0,192,194,3,47,23,0,193,
        192,1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,197,3,45,22,0,196,
        193,1,0,0,0,196,197,1,0,0,0,197,44,1,0,0,0,198,199,7,4,0,0,199,46,
        1,0,0,0,200,202,3,49,24,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,
        1,0,0,0,203,204,1,0,0,0,204,48,1,0,0,0,205,208,3,45,22,0,206,208,
        5,95,0,0,207,205,1,0,0,0,207,206,1,0,0,0,208,50,1,0,0,0,209,210,
        5,48,0,0,210,211,7,5,0,0,211,212,3,53,26,0,212,52,1,0,0,0,213,218,
        3,55,27,0,214,216,3,57,28,0,215,214,1,0,0,0,215,216,1,0,0,0,216,
        217,1,0,0,0,217,219,3,55,27,0,218,215,1,0,0,0,218,219,1,0,0,0,219,
        54,1,0,0,0,220,221,7,6,0,0,221,56,1,0,0,0,222,224,3,59,29,0,223,
        222,1,0,0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,
        58,1,0,0,0,227,230,3,55,27,0,228,230,5,95,0,0,229,227,1,0,0,0,229,
        228,1,0,0,0,230,60,1,0,0,0,231,232,5,40,0,0,232,62,1,0,0,0,233,234,
        5,41,0,0,234,64,1,0,0,0,235,236,5,123,0,0,236,66,1,0,0,0,237,238,
        5,125,0,0,238,68,1,0,0,0,239,240,5,59,0,0,240,70,1,0,0,0,241,242,
        5,61,0,0,242,72,1,0,0,0,243,244,5,44,0,0,244,74,1,0,0,0,245,247,
        5,34,0,0,246,248,3,77,38,0,247,246,1,0,0,0,247,248,1,0,0,0,248,249,
        1,0,0,0,249,250,5,34,0,0,250,76,1,0,0,0,251,253,3,79,39,0,252,251,
        1,0,0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,78,1,
        0,0,0,256,257,8,7,0,0,257,80,1,0,0,0,258,263,3,83,41,0,259,262,3,
        83,41,0,260,262,3,21,10,0,261,259,1,0,0,0,261,260,1,0,0,0,262,265,
        1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,82,1,0,0,0,265,263,1,
        0,0,0,266,267,3,85,42,0,267,84,1,0,0,0,268,269,7,8,0,0,269,86,1,
        0,0,0,270,272,7,9,0,0,271,270,1,0,0,0,272,273,1,0,0,0,273,271,1,
        0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,6,43,0,0,276,88,1,
        0,0,0,277,279,5,13,0,0,278,280,5,10,0,0,279,278,1,0,0,0,279,280,
        1,0,0,0,280,283,1,0,0,0,281,283,5,10,0,0,282,277,1,0,0,0,282,281,
        1,0,0,0,283,284,1,0,0,0,284,285,6,44,0,0,285,90,1,0,0,0,35,0,104,
        108,112,116,120,127,132,134,138,141,145,152,156,161,169,172,179,
        183,187,193,196,203,207,215,218,225,229,247,254,261,263,273,279,
        282,1,6,0,0
    ]

class creole_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS = 1
    FUNCTION = 2
    IntegerLiteral = 3
    LPAREN = 4
    RPAREN = 5
    LBRACE = 6
    RBRACE = 7
    SEMI = 8
    ASSIGN = 9
    COMMA = 10
    StringLiteral = 11
    Identifier = 12
    Whitespace = 13
    Newline = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'fn'", "'('", "')'", "'{'", "'}'", "';'", "'='", 
            "','" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "FUNCTION", "IntegerLiteral", "LPAREN", "RPAREN", "LBRACE", 
            "RBRACE", "SEMI", "ASSIGN", "COMMA", "StringLiteral", "Identifier", 
            "Whitespace", "Newline" ]

    ruleNames = [ "CLASS", "FUNCTION", "IntegerLiteral", "DecimalIntegerLiteral", 
                  "HexIntegerLiteral", "OctalIntegerLiteral", "BinaryIntegerLiteral", 
                  "IntegerTypeSuffix", "DecimalNumeral", "Digits", "Digit", 
                  "NonZeroDigit", "DigitsAndUnderscores", "DigitOrUnderscore", 
                  "Underscores", "HexNumeral", "HexDigits", "HexDigit", 
                  "HexDigitsAndUnderscores", "HexDigitOrUnderscore", "OctalNumeral", 
                  "OctalDigits", "OctalDigit", "OctalDigitsAndUnderscores", 
                  "OctalDigitOrUnderscore", "BinaryNumeral", "BinaryDigits", 
                  "BinaryDigit", "BinaryDigitsAndUnderscores", "BinaryDigitOrUnderscore", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", "ASSIGN", 
                  "COMMA", "StringLiteral", "StringCharacters", "StringCharacter", 
                  "Identifier", "IdentifierNondigit", "Nondigit", "Whitespace", 
                  "Newline" ]

    grammarFileName = "creole_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


